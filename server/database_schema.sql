-- Social Media Agent PostgreSQL Database Schema
-- This schema stores images, captions, and posting schedules generated by the AI agent

-- Enable UUID extension for generating unique IDs
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create users table for authentication
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    google_id VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    picture_url VARCHAR(500),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE
);

-- Create campaigns table to group related posts
CREATE TABLE campaigns (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE
);

-- Create batch_operations table first (before posts table that references it)
CREATE TABLE batch_operations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    description TEXT NOT NULL,
    num_posts INTEGER NOT NULL,
    days_duration INTEGER NOT NULL,
    status VARCHAR(50) DEFAULT 'in_progress', -- in_progress, completed, failed, cancelled
    posts_generated INTEGER DEFAULT 0,
    posts_failed INTEGER DEFAULT 0,
    error_messages TEXT[],
    started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE,
    created_by VARCHAR(100) -- user identifier
);

-- Create posts table to store individual social media posts
CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    campaign_id UUID REFERENCES campaigns(id) ON DELETE CASCADE,
    batch_id UUID REFERENCES batch_operations(id) ON DELETE SET NULL,
    campaign_name TEXT, -- Campaign name for display purposes
    original_description TEXT NOT NULL,
    caption TEXT,
    image_path VARCHAR(500),
    image_url VARCHAR(500),
    scheduled_at TIMESTAMP WITH TIME ZONE,
    posted_at TIMESTAMP WITH TIME ZONE,
    status VARCHAR(50) DEFAULT 'draft', -- draft, scheduled, posted, failed
    platforms TEXT[], -- Array of platforms for multi-platform posting (instagram, facebook, twitter, reddit)
    subreddit VARCHAR(100), -- For Reddit posts - target subreddit
    engagement_metrics JSONB, -- likes, comments, shares, etc.
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create images table to store detailed image information
CREATE TABLE images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    file_path VARCHAR(500) NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_size INTEGER,
    image_width INTEGER,
    image_height INTEGER,
    mime_type VARCHAR(100),
    generation_method VARCHAR(100), -- 'stability_ai', 'placeholder', 'user_upload'
    generation_prompt TEXT,
    generation_settings JSONB, -- AI generation parameters
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create captions table to store caption variations and history
CREATE TABLE captions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    generation_method VARCHAR(100), -- 'groq', 'manual', 'user_input'
    generation_prompt TEXT,
    language VARCHAR(10) DEFAULT 'en',
    hashtags TEXT[], -- Array of hashtags
    word_count INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create posting_schedules table for advanced scheduling
CREATE TABLE posting_schedules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    scheduled_at TIMESTAMP WITH TIME ZONE NOT NULL,
    time_zone VARCHAR(50) DEFAULT 'UTC',
    recurring_pattern VARCHAR(100), -- daily, weekly, monthly, etc.
    recurring_end_date TIMESTAMP WITH TIME ZONE,
    priority INTEGER DEFAULT 1, -- 1=high, 2=medium, 3=low
    auto_post BOOLEAN DEFAULT FALSE,
    posted_at TIMESTAMP WITH TIME ZONE,
    status VARCHAR(50) DEFAULT 'pending', -- pending, posted, failed, cancelled
    error_message TEXT,
    retry_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- batch_operations table moved above (before posts table)

-- Create calendar_events table for calendar integration
CREATE TABLE calendar_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE, -- proper foreign key to posts table
    title VARCHAR(500) NOT NULL,
    description TEXT,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    all_day BOOLEAN DEFAULT FALSE,
    location VARCHAR(500),
    color VARCHAR(20) DEFAULT '#3174ad',
    reminder_minutes INTEGER DEFAULT 15,
    recurrence_rule TEXT,
    status VARCHAR(50) DEFAULT 'scheduled', -- scheduled, completed, cancelled
    google_event_id VARCHAR(255), -- Google Calendar event ID
    google_event_link TEXT, -- Google Calendar event link
    drive_folder_id VARCHAR(255), -- Google Drive folder ID
    drive_file_urls JSONB DEFAULT '{}', -- URLs to related Google Drive files
    event_metadata JSONB DEFAULT '{}', -- Additional event data
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX idx_users_google_id ON users(google_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_campaigns_user_id ON campaigns(user_id);
CREATE INDEX idx_posts_user_id ON posts(user_id);
CREATE INDEX idx_posts_campaign_id ON posts(campaign_id);
CREATE INDEX idx_posts_batch_id ON posts(batch_id);
CREATE INDEX idx_posts_scheduled_at ON posts(scheduled_at);
CREATE INDEX idx_posts_status ON posts(status);
CREATE INDEX idx_posts_platforms ON posts USING GIN (platforms);
CREATE INDEX idx_posts_subreddit ON posts(subreddit);
CREATE INDEX idx_posts_created_at ON posts(created_at);
CREATE INDEX idx_batch_operations_user_id ON batch_operations(user_id);
CREATE INDEX idx_calendar_events_user_id ON calendar_events(user_id);

CREATE INDEX idx_images_post_id ON images(post_id);
CREATE INDEX idx_captions_post_id ON captions(post_id);
CREATE INDEX idx_posting_schedules_post_id ON posting_schedules(post_id);
CREATE INDEX idx_posting_schedules_scheduled_at ON posting_schedules(scheduled_at);
CREATE INDEX idx_posting_schedules_status ON posting_schedules(status);

CREATE INDEX idx_batch_operations_status ON batch_operations(status);
CREATE INDEX idx_batch_operations_started_at ON batch_operations(started_at);

CREATE INDEX idx_calendar_events_post_id ON calendar_events(post_id);
CREATE INDEX idx_calendar_events_start_time ON calendar_events(start_time);
CREATE INDEX idx_calendar_events_status ON calendar_events(status);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

-- Create triggers to automatically update updated_at columns
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_campaigns_updated_at BEFORE UPDATE ON campaigns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_posts_updated_at BEFORE UPDATE ON posts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_posting_schedules_updated_at BEFORE UPDATE ON posting_schedules
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_calendar_events_updated_at BEFORE UPDATE ON calendar_events
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert default campaign for uncategorized posts
INSERT INTO campaigns (id, name, description) 
VALUES (uuid_generate_v4(), 'Default Campaign', 'Default campaign for uncategorized social media posts');
