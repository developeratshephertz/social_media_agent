[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "facebook_manager",
        "importPath": "facebook_manager",
        "description": "facebook_manager",
        "isExtraImport": true,
        "detail": "facebook_manager",
        "documentation": {}
    },
    {
        "label": "TwitterAdapter",
        "importPath": "twitter_adapter",
        "description": "twitter_adapter",
        "isExtraImport": true,
        "detail": "twitter_adapter",
        "documentation": {}
    },
    {
        "label": "RedditAPI",
        "importPath": "reddit_adapter",
        "description": "reddit_adapter",
        "isExtraImport": true,
        "detail": "reddit_adapter",
        "documentation": {}
    },
    {
        "label": "env_manager",
        "importPath": "env_manager",
        "description": "env_manager",
        "isExtraImport": true,
        "detail": "env_manager",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "convert_url_to_local_path",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_facebook",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_twitter",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_reddit",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "validate_local_image_path",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "get_image_info",
        "importPath": "image_path_utils",
        "description": "image_path_utils",
        "isExtraImport": true,
        "detail": "image_path_utils",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "kind": 6,
        "importPath": "server.env_manager",
        "description": "server.env_manager",
        "peekOfCode": "class EnvManager:\n    \"\"\"Manages environment variable files securely\"\"\"\n    def __init__(self, env_file_path: str = \".env\"):\n        self.env_file_path = Path(env_file_path)\n        self.ensure_env_file_exists()\n    def ensure_env_file_exists(self):\n        \"\"\"Create .env file if it doesn't exist\"\"\"\n        if not self.env_file_path.exists():\n            self.env_file_path.touch()\n    def read_env_vars(self) -> Dict[str, str]:",
        "detail": "server.env_manager",
        "documentation": {}
    },
    {
        "label": "env_manager",
        "kind": 5,
        "importPath": "server.env_manager",
        "description": "server.env_manager",
        "peekOfCode": "env_manager = EnvManager('.env')",
        "detail": "server.env_manager",
        "documentation": {}
    },
    {
        "label": "convert_url_to_local_path",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def convert_url_to_local_path(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"\n    Convert various image URL formats to local file paths\n    Handles:\n    - /public/filename.jpg -> public/filename.jpg\n    - public/filename.jpg -> public/filename.jpg (no change)\n    - http://localhost:8000/public/filename.jpg -> public/filename.jpg\n    - http://localhost:5173/public/filename.jpg -> public/filename.jpg\n    - http://localhost:XXXX/public/filename.jpg -> public/filename.jpg\n    - filename.jpg -> public/filename.jpg (assume public folder)",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "validate_local_image_path",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def validate_local_image_path(image_path: Optional[str]) -> bool:\n    \"\"\"\n    Validate that a local image path exists and is readable\n    Args:\n        image_path: Local file path to validate\n    Returns:\n        True if file exists and is readable, False otherwise\n    \"\"\"\n    if not image_path:\n        return False",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "get_image_info",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def get_image_info(image_path: Optional[str]) -> dict:\n    \"\"\"\n    Get information about an image file\n    Args:\n        image_path: Local file path to analyze\n    Returns:\n        Dictionary with image info (exists, size, readable, etc.)\n    \"\"\"\n    info = {\n        \"path\": image_path,",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_facebook",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def convert_image_path_for_facebook(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Facebook posting\"\"\"\n    return convert_url_to_local_path(image_path)\ndef convert_image_path_for_twitter(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Twitter posting\"\"\"\n    return convert_url_to_local_path(image_path)\ndef convert_image_path_for_reddit(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Reddit posting\"\"\"\n    return convert_url_to_local_path(image_path)",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_twitter",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def convert_image_path_for_twitter(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Twitter posting\"\"\"\n    return convert_url_to_local_path(image_path)\ndef convert_image_path_for_reddit(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Reddit posting\"\"\"\n    return convert_url_to_local_path(image_path)",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "convert_image_path_for_reddit",
        "kind": 2,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "def convert_image_path_for_reddit(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"Convert image path for Reddit posting\"\"\"\n    return convert_url_to_local_path(image_path)",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.image_path_utils",
        "description": "server.image_path_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef convert_url_to_local_path(image_path: Optional[str]) -> Optional[str]:\n    \"\"\"\n    Convert various image URL formats to local file paths\n    Handles:\n    - /public/filename.jpg -> public/filename.jpg\n    - public/filename.jpg -> public/filename.jpg (no change)\n    - http://localhost:8000/public/filename.jpg -> public/filename.jpg\n    - http://localhost:5173/public/filename.jpg -> public/filename.jpg\n    - http://localhost:XXXX/public/filename.jpg -> public/filename.jpg",
        "detail": "server.image_path_utils",
        "documentation": {}
    },
    {
        "label": "PlatformCredentials",
        "kind": 6,
        "importPath": "server.social_media_routes",
        "description": "server.social_media_routes",
        "peekOfCode": "class PlatformCredentials(BaseModel):\n    \"\"\"Model for platform credentials\"\"\"\n    credentials: Dict[str, str]\n    class Config:\n        # Allow extra fields for flexibility\n        extra = \"allow\"\nclass ConnectionResponse(BaseModel):\n    success: bool\n    connected: bool\n    message: str",
        "detail": "server.social_media_routes",
        "documentation": {}
    },
    {
        "label": "ConnectionResponse",
        "kind": 6,
        "importPath": "server.social_media_routes",
        "description": "server.social_media_routes",
        "peekOfCode": "class ConnectionResponse(BaseModel):\n    success: bool\n    connected: bool\n    message: str\n    error: Optional[str] = None\nclass StatusResponse(BaseModel):\n    connected: bool\n    has_credentials: bool\n    platform: str\n    last_checked: str",
        "detail": "server.social_media_routes",
        "documentation": {}
    },
    {
        "label": "StatusResponse",
        "kind": 6,
        "importPath": "server.social_media_routes",
        "description": "server.social_media_routes",
        "peekOfCode": "class StatusResponse(BaseModel):\n    connected: bool\n    has_credentials: bool\n    platform: str\n    last_checked: str\n    details: Optional[Dict[str, Any]] = None\n# Platform connection testers\nasync def test_facebook_connection() -> Dict[str, Any]:\n    \"\"\"Test Facebook connection using existing credentials\"\"\"\n    try:",
        "detail": "server.social_media_routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.social_media_routes",
        "description": "server.social_media_routes",
        "peekOfCode": "router = APIRouter(prefix=\"/social-media\", tags=[\"social-media\"])\nclass PlatformCredentials(BaseModel):\n    \"\"\"Model for platform credentials\"\"\"\n    credentials: Dict[str, str]\n    class Config:\n        # Allow extra fields for flexibility\n        extra = \"allow\"\nclass ConnectionResponse(BaseModel):\n    success: bool\n    connected: bool",
        "detail": "server.social_media_routes",
        "documentation": {}
    },
    {
        "label": "test_image_path_conversion",
        "kind": 2,
        "importPath": "server.test_image_path_fixes",
        "description": "server.test_image_path_fixes",
        "peekOfCode": "def test_image_path_conversion():\n    \"\"\"Test various image path conversion scenarios\"\"\"\n    print(\"Testing Image Path Conversion...\")\n    print(\"=\" * 50)\n    test_cases = [\n        # (input_path, expected_output, description)\n        (\"/public/image.jpg\", \"public/image.jpg\", \"Leading slash removal\"),\n        (\"public/image.jpg\", \"public/image.jpg\", \"Already correct format\"),\n        (\"http://localhost:8000/public/image.jpg\", \"public/image.jpg\", \"Full localhost URL\"),\n        (\"http://localhost:5173/public/image.jpg\", \"public/image.jpg\", \"Different port localhost URL\"),",
        "detail": "server.test_image_path_fixes",
        "documentation": {}
    },
    {
        "label": "test_platform_consistency",
        "kind": 2,
        "importPath": "server.test_image_path_fixes",
        "description": "server.test_image_path_fixes",
        "peekOfCode": "def test_platform_consistency():\n    \"\"\"Test that all platforms use the same conversion logic\"\"\"\n    print(\"Testing Platform Consistency...\")\n    print(\"=\" * 50)\n    test_urls = [\n        \"/public/test.jpg\",\n        \"http://localhost:8000/public/test.jpg\",\n        \"public/test.jpg\"\n    ]\n    all_consistent = True",
        "detail": "server.test_image_path_fixes",
        "documentation": {}
    },
    {
        "label": "test_file_validation",
        "kind": 2,
        "importPath": "server.test_image_path_fixes",
        "description": "server.test_image_path_fixes",
        "peekOfCode": "def test_file_validation():\n    \"\"\"Test file validation functions\"\"\"\n    print(\"Testing File Validation...\")\n    print(\"=\" * 50)\n    # Create a temporary test file\n    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as temp_file:\n        temp_file.write(\"Test image content\")\n        temp_file_path = temp_file.name\n    try:\n        # Test existing file",
        "detail": "server.test_image_path_fixes",
        "documentation": {}
    },
    {
        "label": "test_scheduler_fix_simulation",
        "kind": 2,
        "importPath": "server.test_image_path_fixes",
        "description": "server.test_image_path_fixes",
        "peekOfCode": "def test_scheduler_fix_simulation():\n    \"\"\"Simulate the scheduler fix scenarios\"\"\"\n    print(\"Testing Scheduler Fix Simulation...\")\n    print(\"=\" * 50)\n    # Simulate the problematic URLs that were causing Facebook failures\n    problematic_urls = [\n        \"public/http://localhost:8000/public/generated_12345678_1234567890.png\",\n        \"/public/http://localhost:8000/public/placeholder_abcd1234_9876543210.png\",\n        \"http://localhost:8000/public/custom_image_20240101_12345678.jpg\"\n    ]",
        "detail": "server.test_image_path_fixes",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.test_image_path_fixes",
        "description": "server.test_image_path_fixes",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"Social Media Agent - Image Path Fix Validation\")\n    print(\"=\" * 60)\n    print()\n    tests = [\n        (\"Path Conversion\", test_image_path_conversion),\n        (\"Platform Consistency\", test_platform_consistency),\n        (\"File Validation\", test_file_validation),\n        (\"Scheduler Fix Simulation\", test_scheduler_fix_simulation),",
        "detail": "server.test_image_path_fixes",
        "documentation": {}
    },
    {
        "label": "TrendingTopicsService",
        "kind": 6,
        "importPath": "server.trending_topics_service",
        "description": "server.trending_topics_service",
        "peekOfCode": "class TrendingTopicsService:\n    \"\"\"Service for generating AI-powered trending topics\"\"\"\n    def __init__(self):\n        self.groq_api_key = os.getenv(\"GROQ_API_KEY\")\n        self.cache_file = \"trending_topics_cache.json\"\n        self.cache_duration_hours = 4\n        self.categories = {\n            \"all\": \"All\",\n            \"technology\": \"Technology\",\n            \"business\": \"Business\", ",
        "detail": "server.trending_topics_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.trending_topics_service",
        "description": "server.trending_topics_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TrendingTopicsService:\n    \"\"\"Service for generating AI-powered trending topics\"\"\"\n    def __init__(self):\n        self.groq_api_key = os.getenv(\"GROQ_API_KEY\")\n        self.cache_file = \"trending_topics_cache.json\"\n        self.cache_duration_hours = 4\n        self.categories = {\n            \"all\": \"All\",\n            \"technology\": \"Technology\",",
        "detail": "server.trending_topics_service",
        "documentation": {}
    },
    {
        "label": "trending_service",
        "kind": 5,
        "importPath": "server.trending_topics_service",
        "description": "server.trending_topics_service",
        "peekOfCode": "trending_service = TrendingTopicsService()",
        "detail": "server.trending_topics_service",
        "documentation": {}
    },
    {
        "label": "test_scheduling",
        "kind": 2,
        "importPath": "test_scheduling",
        "description": "test_scheduling",
        "peekOfCode": "def test_scheduling():\n    print(\"🧪 Testing Schedule Distribution Logic\\n\")\n    # Test Case 1: 2 posts over 1 day (your reported problem)\n    print(\"📋 Test Case 1: 2 posts, 1 day\")\n    dates1 = _compute_schedule_dates(2, 1)\n    for i, date in enumerate(dates1):\n        print(f\"   Post {i + 1}: {datetime.fromisoformat(date).strftime('%Y-%m-%d %H:%M:%S')}\")\n    print()\n    # Test Case 2: 3 posts over 2 days\n    print(\"📋 Test Case 2: 3 posts, 2 days\") ",
        "detail": "test_scheduling",
        "documentation": {}
    }
]